"""
User Profile Database Model
SQLAlchemy model for storing nurse user profiles with work settings
"""

from sqlalchemy import Column, String, DateTime, JSON, Boolean, Integer, ForeignKey
from sqlalchemy.orm import relationship
from datetime import datetime
from src.models.database import Base
import uuid


class UserProfile(Base):
    """User profile for personalized document generation"""
    __tablename__ = "user_profiles"

    # Primary Key
    user_id = Column(String(36), ForeignKey("users.id"), primary_key=True)

    # Personal Information
    full_name = Column(String(200), nullable=False)
    credentials = Column(JSON, nullable=False)  # List of credentials
    primary_credential = Column(String(20), nullable=False, default="RN")
    permission_level = Column(String(20), nullable=False, default="full")

    # License Information
    license_number = Column(String(50), nullable=True)
    license_state = Column(String(2), nullable=True)
    license_expiry = Column(DateTime, nullable=True)

    # Work Setting
    facility_name = Column(String(200), nullable=False)
    work_setting = Column(String(50), nullable=False)
    department = Column(String(100), nullable=True)
    patient_population = Column(String(50), nullable=False, default="mixed_literacy")

    # Contact Information
    work_phone = Column(String(20), nullable=True)
    work_email = Column(String(100), nullable=True)

    # Document Preferences
    default_patient_language = Column(String(10), nullable=False, default="en")
    default_patient_reading_level = Column(String(20), nullable=False, default="intermediate")
    secondary_languages = Column(JSON, nullable=False, default=[])  # List of language codes

    # Document Generation Preferences
    document_preferences = Column(JSON, nullable=True)  # Store DocumentPreferences as JSON

    # Signature
    has_signature = Column(Boolean, default=False)
    signature_path = Column(String(500), nullable=True)

    # Statistics
    documents_generated = Column(Integer, default=0)
    last_document_at = Column(DateTime, nullable=True)

    # Metadata
    created_at = Column(DateTime, default=datetime.utcnow, nullable=False)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow, nullable=False)

    # Relationships
    # user = relationship("User", back_populates="profile")


class UserDocumentHistory(Base):
    """Track documents generated by user for analytics and learning"""
    __tablename__ = "user_document_history"

    id = Column(String(36), primary_key=True, default=lambda: str(uuid.uuid4()))
    user_id = Column(String(36), ForeignKey("users.id"), nullable=False, index=True)

    # Document Details
    document_type = Column(String(50), nullable=False)  # discharge_instructions, medication_guide, etc.
    language_used = Column(String(10), nullable=False)
    reading_level_used = Column(String(20), nullable=False)

    # Patient Context (optional, for learning)
    patient_population_type = Column(String(50), nullable=True)
    work_setting_at_generation = Column(String(50), nullable=True)

    # Generation Details
    generated_at = Column(DateTime, default=datetime.utcnow, nullable=False, index=True)
    generation_time_ms = Column(Integer, nullable=True)  # How long it took
    file_size_bytes = Column(Integer, nullable=True)

    # Delivery
    was_emailed = Column(Boolean, default=False)
    was_printed = Column(Boolean, default=False)
    was_downloaded = Column(Boolean, default=True)


class DocumentTemplate(Base):
    """Custom templates created by users"""
    __tablename__ = "document_templates"

    id = Column(String(36), primary_key=True, default=lambda: str(uuid.uuid4()))
    created_by_user_id = Column(String(36), ForeignKey("users.id"), nullable=False, index=True)

    # Template Details
    template_name = Column(String(200), nullable=False)
    template_type = Column(String(50), nullable=False)  # Base document type
    description = Column(String(500), nullable=True)

    # Template Content
    template_data = Column(JSON, nullable=False)  # Stored template structure

    # Sharing
    is_public = Column(Boolean, default=False)  # Can other users use this?
    facility_specific = Column(String(200), nullable=True)  # Limit to specific facility

    # Usage Stats
    times_used = Column(Integer, default=0)
    last_used_at = Column(DateTime, nullable=True)

    # Metadata
    created_at = Column(DateTime, default=datetime.utcnow, nullable=False)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow, nullable=False)
