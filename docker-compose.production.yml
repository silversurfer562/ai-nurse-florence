# Production Docker Compose for AI Nurse Florence
# Secure, scalable deployment with PostgreSQL and Redis

version: '3.8'

services:
  # Main API Application
  api:
    build:
      context: .
      dockerfile: Dockerfile.production
    image: ai-nurse-florence:production
    container_name: florence-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      # Load from .env.production file
      - NODE_ENV=production
      - PYTHON_ENV=production
      - DEBUG=false
      - USE_LIVE=${USE_LIVE:-true}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      
      # Database connection
      - DATABASE_URL=postgresql+asyncpg://florence:${DB_PASSWORD}@postgres:5432/florence_db
      
      # Redis connection  
      - REDIS_URL=redis://redis:6379/0
      
      # Security tokens (SET IN ENVIRONMENT)
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - API_BEARER=${API_BEARER}
      
      # API Keys (load from environment or secrets)
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - API_BEARER=${API_BEARER}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      
      # CORS settings
      - CORS_ORIGINS=${CORS_ORIGINS}
      
      # Rate limiting
      - RATE_LIMIT_PER_MINUTE=${RATE_LIMIT_PER_MINUTE:-60}
      
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - florence-network
    volumes:
      - ./logs:/app/logs:rw
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: florence-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=florence_db
      - POSTGRES_USER=florence
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"  # Remove in production if not needed
    networks:
      - florence-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U florence -d florence_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: florence-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"  # Remove in production if not needed
    networks:
      - florence-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.1'

  # Celery Worker (Optional - for background tasks)
  worker:
    build:
      context: .
      dockerfile: Dockerfile.production
    image: ai-nurse-florence:production
    container_name: florence-worker
    restart: unless-stopped
    command: ["celery", "-A", "celery_worker.celery_app", "worker", "--loglevel=info", "--concurrency=2"]
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql+asyncpg://florence:${DB_PASSWORD}@postgres:5432/florence_db
      - REDIS_URL=redis://redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - USE_LIVE=${USE_LIVE:-true}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - florence-network
    volumes:
      - ./logs:/app/logs:rw
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  # Nginx Reverse Proxy (Optional - for SSL/load balancing)
  nginx:
    image: nginx:alpine
    container_name: florence-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx:rw
    depends_on:
      - api
    networks:
      - florence-network
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'

# Networks
networks:
  florence-network:
    driver: bridge
    name: florence-network

# Persistent volumes
volumes:
  postgres_data:
    name: florence_postgres_data
  redis_data:
    name: florence_redis_data
FROM python:3.11-slim

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements first for caching
COPY requirements.txt .
RUN pip install --upgrade pip && \
    pip install -r requirements.txt

# Copy application code
COPY . .

# Copy and make start script executable
COPY start.sh .
RUN chmod +x start.sh

# Health check for Railway
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:${PORT:-8000}/health || exit 1

# Expose port
EXPOSE ${PORT:-8000}

# Start application
CMD ["./start.sh"]
